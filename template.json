{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  "parameters": {
    "projectShort": {
      "type": "string",
      "maxLength": 8,
      "metadata": {
        "description": "A short identifier (up to 8 characters) for your project that will be added to your resource names"
      }
    },
    "sqlDbAdminLogin": {
      "type": "string",
      "defaultValue": "sqldemoadmin",
      "metadata": {
        "description": "The username for the database administrator login"
      }
    },
    "sqlDbAdminPassword": {
      "type": "securestring",
      "defaultValue": "!demo54321",
      "metadata": {
        "description": "The password for the database administrator login"
      }
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow('d')]",
      "metadata": {
        "description": "The timestamp format that will be used for creating the tags in your RG - leave at default"
      }
    },
    "StorageAccountSasProperties": {
      "type": "object",
      "defaultValue": {
        "signedServices": "b",
        "signedPermission": "rw",
        "signedExpiry": "[dateTimeAdd(utcNow('u'), 'P3M')]",
        "signedResourceTypes": "o"
      }
    }
  },
  "variables": {
    "blobStorageAccountName": "[concat('stgblob', parameters('projectShort'), uniqueString(resourceGroup().id))]",
    "adlStorageAccountName": "[concat('stgadl', parameters('projectShort'), uniqueString(resourceGroup().id))]",
    "keyVaultName": "[concat('kv-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "sqlConnectionStringSecretName": "[concat('connstr-', variables('sqldb_servername'))]",
    "blobStorageSASsecretName": "[concat('sas-', variables('blobStorageAccountName'))]",
    "blobStorageAccessKeySecretName": "[concat('key-', variables('blobStorageAccountName'))]",
    "blobStorageConnectionStringSecretName": "[concat('constr-', variables('blobStorageAccountName'))]",
    "adlStorageSASsecretName": "[concat('sas-', variables('adlStorageAccountName'))]",
    "adlStorageAccessKeySecretName": "[concat('key-', variables('adlStorageAccountName'))]",
    "adlStorageConnectionStringSecretName": "[concat('constr-', variables('adlStorageAccountName'))]",
    "azureKeyVault_baseUrl": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]",
    "sqldb_servername": "[concat('sqlsrv-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "sqldb_dbname": "[concat('sqldb-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "dataFactoryName": "[concat('adf-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "factoryId": "[concat('Microsoft.DataFactory/factories/adf-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "tags": {
      "createdOn": "[parameters('utcValue')]",
      "createdBy": "[concat('Automatic deployment for ', parameters('projectShort'))]"
    }
  },
  "resources": [
    { // create blob storage account
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('blobStorageAccountName')]",
      "location": "westeurope",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "isHnsEnabled": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    { // create blob storage blob service
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    { // create blob storage queue service
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create blob storage table service
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create blob storage sourcedata container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default/sourcedata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('blobStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    { // create blob storage sinkdata container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default/sinkdata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('blobStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    { // create adl storage account
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('adlStorageAccountName')]",
      "location": "eastus",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    { // create adl storage blob services
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "changeFeed": {
          "enabled": false
        },
        "restorePolicy": {
          "enabled": false
        },
        "containerDeleteRetentionPolicy": {
          "enabled": false
        },
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        },
        "isVersioningEnabled": false
      }
    },
    { // create adl storage queue services
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create adl storage table services
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create blob extract container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/extract')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob loading container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/loading')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob movie in container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/movie-in')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob movie out container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/movie-out')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob tranform container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/transform')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create sql server and database
      "apiVersion": "2019-06-01-preview",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tags')]",
      "name": "[variables('sqldb_servername')]",
      "properties": {
        "administratorLogin": "[parameters('sqlDbAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlDbAdminPassword')]",
        "version": "12.0"
      },

      "resources": [
        {
          "apiVersion": "2021-02-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqldb_servername'))]"
          ],
          "location": "[resourceGroup().location]",
          "tags": "[variables('tags')]",
          "name": "[variables('sqldb_dbname')]",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "34359738368",
            "zoneRedundant": false,
            "minCapacity": 0.5,
            "autoPauseDelay": 60,
            "readScale": "Disabled",
            "storageAccountType": "LRS"
          },
          "sku": {
            "name": "GP_S_Gen5",
            "tier": "GeneralPurpose",
            "family": "Gen5",
            "capacity": 4
          },
          "type": "databases"
        },
        {
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqldb_servername'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          },
          "type": "firewallrules"
        }
      ]
    },
    { // create key vault
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "name": "[variables('keyVaultName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[concat('Microsoft.DataFactory/factories/', variables('dataFactoryName'))]"
      ],
      "properties": {
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.DataFactory/factories/', variables('dataFactoryName')), '2018-06-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
                "get"
              ],
              "secrets": [
                "list",
                "get",
                "set"
              ]
            }
          }
        ],
        "sku": {
          "name": "standard",
          "family": "A"
        }
      }
    },
    { // create blob sas secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('blobStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('blobStorageSASsecretName'))]",
      "properties": {
        "value": "[listAccountSas(variables('blobStorageAccountName'), '2018-07-01', parameters('StorageAccountSasProperties')).accountSasToken]"
      }
    },
    { // create blob acces key secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('blobStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('blobStorageAccessKeySecretName'))]",
      "properties": {
        "value": "[listKeys(variables('blobStorageAccountName'), '2018-07-01').keys[0].value]"
      }
    },
    { // create blob connection string secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('blobStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('blobStorageConnectionStringSecretName'))]",
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('blobStorageAccountName'), ';AccountKey=', listKeys(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('blobStorageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
      }
    },
    { // create adl sas secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('adlStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('adlStorageSASsecretName'))]",
      "properties": {
        "value": "[listAccountSas(variables('adlStorageAccountName'), '2018-07-01', parameters('StorageAccountSasProperties')).accountSasToken]"
      }
    },
    { // create adl access key secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('adlStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('adlStorageAccessKeySecretName'))]",
      "properties": {
        "value": "[listKeys(variables('adlStorageAccountName'), '2018-07-01').keys[0].value]"
      }
    },
    { // create adl connection string secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('adlStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('adlStorageConnectionStringSecretName'))]",
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('adlStorageAccountName'), ';AccountKey=', listKeys(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('blobStorageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
      }
    },
    { // create sqldb connection string secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Sql/servers/', variables('sqldb_servername'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('sqlConnectionStringSecretName'))]",
      "properties": {
        "value": "[concat('Server=tcp:', variables('sqldb_servername'),'.database.windows.net,1433;Initial Catalog=', variables('sqldb_dbname'),';Persist Security Info=False;User ID=', parameters('sqlDbAdminLogin'),';Password=', parameters('sqlDbAdminPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
      }
    },
    { // create the azure data factory
      "name": "[variables('dataFactoryName')]",
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "location": "[resourceGroup().location]",
      "properties": {},
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": "[variables('tags')]",
      "resources": [
        { // create key vault linked service 
          "name": "[concat(variables('dataFactoryName'), '/KeyVaultService')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureKeyVault",
            "typeProperties": {
              "baseUrl": "[variables('azureKeyVault_baseUrl')]"
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]"
          ]
        },
        { // create blob storage linked servce
          "name": "[concat(variables('dataFactoryName'), '/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]",
          "type": "Microsoft.DataFactory/factories/linkedservices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobStorage",
            "typeProperties": {
              "connectionString": {
                "type": "AzureKeyVaultSecret",
                "store": {
                  "referenceName": "KeyVaultService",
                  "type": "LinkedServiceReference"
                },
                "secretName": "[variables('blobStorageConnectionStringSecretName')]"
              }
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/KeyVaultService')]"
          ]
        },
        { // create adl storage linked service
          "name": "[concat(variables('dataFactoryName'), '/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]",
          "type": "Microsoft.DataFactory/factories/linkedservices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobFS",
            "typeProperties": {
              "url": "[concat('https://', variables('adlStorageAccountName'),'.dfs.core.windows.net/')]",
              "accountKey": {
                "type": "AzureKeyVaultSecret",
                "store": {
                  "referenceName": "KeyVaultService",
                  "type": "LinkedServiceReference"
                },
                "secretName": "[variables('adlStorageAccessKeySecretName')]"
              }
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/KeyVaultService')]"
          ]
        },
        { // create sqldb linked service
          "name": "[concat(variables('dataFactoryName'), '/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'SQLdb')]",
          "type": "Microsoft.DataFactory/factories/linkedservices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureSqlDatabase",
            "typeProperties": {
              "connectionString": {
                "type": "AzureKeyVaultSecret",
                "store": {
                  "referenceName": "KeyVaultService",
                  "type": "LinkedServiceReference"
                },
                "secretName": "[variables('sqlConnectionStringSecretName')]"
              }
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/KeyVaultService')]"
          ]
        },
        { // create blob stoarge dataset
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobStorageLocation",
                "fileName": "moviesDB.csv",
                "container": "movie-in"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "name": "movie",
                "type": "String"
              },
              {
                "name": "title",
                "type": "String"
              },
              {
                "name": "genres",
                "type": "String"
              },
              {
                "name": "year",
                "type": "String"
              },
              {
                "name": "Rating",
                "type": "String"
              },
              {
                "name": "Rotton Tomato",
                "type": "String"
              },
              {
                "name": "Address",
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]"
          ]
        },
        { // create adl storage extra dataset
          "name": "[concat(variables('dataFactoryName'), '/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Extra')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileSystem": "loading"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "name": "id_odsp",
                "type": "String"
              },
              {
                "name": "id_event",
                "type": "String"
              },
              {
                "name": "sort_order",
                "type": "String"
              },
              {
                "name": "time",
                "type": "String"
              },
              {
                "name": "text",
                "type": "String"
              },
              {
                "name": "event_type",
                "type": "String"
              },
              {
                "name": "event_type2",
                "type": "String"
              },
              {
                "name": "side",
                "type": "String"
              },
              {
                "name": "event_team",
                "type": "String"
              },
              {
                "name": "opponent",
                "type": "String"
              },
              {
                "name": "player",
                "type": "String"
              },
              {
                "name": "player2",
                "type": "String"
              },
              {
                "name": "player_in",
                "type": "String"
              },
              {
                "name": "player_out",
                "type": "String"
              },
              {
                "name": "shot_place",
                "type": "String"
              },
              {
                "name": "shot_outcome",
                "type": "String"
              },
              {
                "name": "is_goal",
                "type": "String"
              },
              {
                "name": "location",
                "type": "String"
              },
              {
                "name": "bodypart",
                "type": "String"
              },
              {
                "name": "assist_method",
                "type": "String"
              },
              {
                "name": "situation",
                "type": "String"
              },
              {
                "name": "fast_break",
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]"
          ]
        },
        { // create adl storage source dataset
          "name": "[concat(variables('dataFactoryName'), '/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Source')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileName": "events.txt",
                "fileSystem": "loading"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "name": "id_odsp",
                "type": "String"
              },
              {
                "name": "id_event",
                "type": "String"
              },
              {
                "name": "sort_order",
                "type": "String"
              },
              {
                "name": "time",
                "type": "String"
              },
              {
                "name": "text",
                "type": "String"
              },
              {
                "name": "event_type",
                "type": "String"
              },
              {
                "name": "event_type2",
                "type": "String"
              },
              {
                "name": "side",
                "type": "String"
              },
              {
                "name": "event_team",
                "type": "String"
              },
              {
                "name": "opponent",
                "type": "String"
              },
              {
                "name": "player",
                "type": "String"
              },
              {
                "name": "player2",
                "type": "String"
              },
              {
                "name": "player_in",
                "type": "String"
              },
              {
                "name": "player_out",
                "type": "String"
              },
              {
                "name": "shot_place",
                "type": "String"
              },
              {
                "name": "shot_outcome",
                "type": "String"
              },
              {
                "name": "is_goal",
                "type": "String"
              },
              {
                "name": "location",
                "type": "String"
              },
              {
                "name": "bodypart",
                "type": "String"
              },
              {
                "name": "assist_method",
                "type": "String"
              },
              {
                "name": "situation",
                "type": "String"
              },
              {
                "name": "fast_break",
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]"
          ]
        },
        { // create adl storage sink dataset
          "name": "[concat(variables('dataFactoryName'), '/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Sink')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileSystem": "movie-out"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "quoteChar": "\""
            },
            "schema": []
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]"
          ]
        },
        { // create dataset sql sink
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'SQLSink')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'SQLdb')]",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "AzureSqlTable",
            "schema": [
              {
                "name": "id_odsp",
                "type": "varchar"
              },
              {
                "name": "id_event",
                "type": "varchar"
              },
              {
                "name": "sort_order",
                "type": "int",
                "precision": 10
              },
              {
                "name": "time",
                "type": "int",
                "precision": 10
              },
              {
                "name": "event_type",
                "type": "int",
                "precision": 10
              },
              {
                "name": "event_type_str",
                "type": "varchar"
              },
              {
                "name": "event_type2",
                "type": "int",
                "precision": 10
              }
            ],
            "typeProperties": {
              "schema": "dbo",
              "table": "game_events"
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'SQLdb')]"
          ]
        },
        { // create dataset blob storage loading source 
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'BlobLoadingSrc')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]",
              "type": "LinkedServiceReference"
            },
            "folder": {
              "name": "Loading"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobStorageLocation",
                "container": "movie-in"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "name": "movie",
                "type": "String"
              },
              {
                "name": "title",
                "type": "String"
              },
              {
                "name": "genres",
                "type": "String"
              },
              {
                "name": "year",
                "type": "String"
              },
              {
                "name": "Rating",
                "type": "String"
              },
              {
                "name": "Rotton Tomato",
                "type": "String"
              },
              {
                "name": "Address",
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]"
          ]
        },
        { // create dataset adl loading source 
          "name": "[concat(variables('dataFactoryName'), '/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LoadingSource')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",

          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]",
              "type": "LinkedServiceReference"
            },
            "folder": {
              "name": "Loading"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileSystem": "movie-in"
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "name": "movie",
                "type": "String"
              },
              {
                "name": "title",
                "type": "String"
              },
              {
                "name": "genres",
                "type": "String"
              },
              {
                "name": "year",
                "type": "String"
              },
              {
                "name": "Rating",
                "type": "String"
              },
              {
                "name": "Rotton Tomato",
                "type": "String"
              },
              {
                "name": "Prop_6",
                "type": "String"
              },
              {
                "name": "Address",
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Adl')]"
          ]
        },
        { // create movie loading pipeline
          "name": "[concat(variables('dataFactoryName'), '/Loading')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Get Metadata",
                "type": "GetMetadata",
                "dependsOn": [],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "dataset": {
                    "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'BlobLoadingSrc')]",
                    "type": "DatasetReference"
                  },
                  "fieldList": [
                    "childItems",
                    "itemName"
                  ],
                  "storeSettings": {
                    "type": "AzureBlobStorageReadSettings",
                    "recursive": true,
                    "enablePartitionDiscovery": false
                  },
                  "formatSettings": {
                    "type": "DelimitedTextReadSettings"
                  }
                }
              },
              {
                "name": "ForEach",
                "type": "ForEach",
                "dependsOn": [
                  {
                    "activity": "Get Metadata",
                    "dependencyConditions": [
                      "Succeeded"
                    ]
                  }
                ],
                "userProperties": [],
                "typeProperties": {
                  "items": {
                    "value": "@activity('Get Metadata').output.ChildItems\n\n",
                    "type": "Expression"
                  },
                  "isSequential": true,
                  "activities": [
                    {
                      "name": "Copy data",
                      "type": "Copy",
                      "dependsOn": [],
                      "policy": {
                        "timeout": "7.00:00:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [
                        {
                          "name": "Source",
                          "value": "movie-in//@{item().name}"
                        },
                        {
                          "name": "Destination",
                          "value": "loading//"
                        }
                      ],
                      "typeProperties": {
                        "source": {
                          "type": "DelimitedTextSource",
                          "storeSettings": {
                            "type": "AzureBlobStorageReadSettings",
                            "recursive": true,
                            "enablePartitionDiscovery": false
                          },
                          "formatSettings": {
                            "type": "DelimitedTextReadSettings"
                          }
                        },
                        "sink": {
                          "type": "DelimitedTextSink",
                          "storeSettings": {
                            "type": "AzureBlobFSWriteSettings"
                          },
                          "formatSettings": {
                            "type": "DelimitedTextWriteSettings",
                            "quoteAllText": true,
                            "fileExtension": ".txt"
                          }
                        },
                        "enableStaging": false,
                        "translator": {
                          "type": "TabularTranslator",
                          "mappings": [
                            {
                              "source": {
                                "name": "movie",
                                "type": "String",
                                "physicalType": "String"
                              },
                              "sink": {
                                "name": "movie",
                                "type": "String",
                                "physicalType": "String"
                              }
                            },
                            {
                              "source": {
                                "name": "title",
                                "type": "String",
                                "physicalType": "String"
                              },
                              "sink": {
                                "name": "title",
                                "type": "String",
                                "physicalType": "String"
                              }
                            },
                            {
                              "source": {
                                "name": "genres",
                                "type": "String",
                                "physicalType": "String"
                              },
                              "sink": {
                                "name": "genres",
                                "type": "String",
                                "physicalType": "String"
                              }
                            },
                            {
                              "source": {
                                "name": "year",
                                "type": "String",
                                "physicalType": "String"
                              },
                              "sink": {
                                "name": "year",
                                "type": "String",
                                "physicalType": "String"
                              }
                            },
                            {
                              "source": {
                                "name": "Rating",
                                "type": "String",
                                "physicalType": "String"
                              },
                              "sink": {
                                "name": "Rating",
                                "type": "String",
                                "physicalType": "String"
                              }
                            },
                            {
                              "source": {
                                "name": "Rotton Tomato",
                                "type": "String",
                                "physicalType": "String"
                              },
                              "sink": {
                                "name": "Rotton Tomato",
                                "type": "String",
                                "physicalType": "String"
                              }
                            },
                            {
                              "source": {
                                "name": "Address",
                                "type": "String",
                                "physicalType": "String"
                              },
                              "sink": {
                                "name": "Address",
                                "type": "String",
                                "physicalType": "String"
                              }
                            }
                          ],
                          "typeConversion": true,
                          "typeConversionSettings": {
                            "allowDataTruncation": true,
                            "treatBooleanAsNumber": false
                          }
                        }
                      },
                      "inputs": [
                        {
                          "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]",
                          "type": "DatasetReference"
                        }
                      ],
                      "outputs": [
                        {
                          "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LoadingSource')]",
                          "type": "DatasetReference"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "folder": {
              "name": "MovieELT/Loading"
            },
            "annotations": [],
            "lastPublishTime": "2021-05-15T01:05:16Z"
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'BlobLoadingSrc')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Blob')]",
            "[concat(variables('factoryId'), '/datasets/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LoadingSource')]"
          ]
        },
        {
          "name": "[concat(variables('dataFactoryName'), '/Transformation')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Data flow - Movie",
                "type": "ExecuteDataFlow",
                "dependsOn": [],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "dataflow": {
                    "referenceName": "MovieETL",
                    "type": "DataFlowReference"
                  },
                  "compute": {
                    "coreCount": 8,
                    "computeType": "General"
                  },
                  "traceLevel": "Fine"
                }
              }
            ],
            "folder": {
              "name": "MovieELT/Transforming"
            },
            "annotations": [],
            "lastPublishTime": "2021-05-15T00:16:40Z"
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'BlobLoadingSrc')]",
            "[concat(variables('factoryId'), '/dataflows/MovieETL')]"
          ]
        },
        {
          "name": "[concat(variables('dataFactoryName'), '/MovieETL')]",
          "apiVersion": "2018-06-01",
          "type": "Microsoft.DataFactory/factories/dataflows",
          "properties": {
            "folder": {
              "name": "Movie"
            },
            "type": "MappingDataFlow",
            "typeProperties": {
              "sources": [
                {
                  "dataset": {
                    "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LoadingSource')]",
                    "type": "DatasetReference"
                  },
                  "name": "MovieDB"
                }
              ],
              "sinks": [
                {
                  "dataset": {
                    "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Sink')]",
                    "type": "DatasetReference"
                  },
                  "name": "MoviesSink"
                },
                {
                  "dataset": {
                    "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Sink')]",
                    "type": "DatasetReference"
                  },
                  "name": "AllData"
                }
              ],
              "transformations": [
                {
                  "name": "FilterYear"
                },
                {
                  "name": "AggregateComedyRatings"
                },
                {
                  "name": "DerivedColumnAddress"
                },
                {
                  "name": "DerivedColumnAll"
                }
              ],
              "script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string,\n\t\tProp_6 as string,\n\t\tAddress as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[('moviesDB.txt')]) ~> MovieDB\nMovieDB filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> FilterYear\nDerivedColumnAll aggregate(groupBy(year),\n\tAverageComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRatings\nFilterYear derive(AllAddress = regexReplace(regexReplace(Address,'[\\n]',','),'[\\r]',',')) ~> DerivedColumnAddress\nDerivedColumnAddress derive({Address 1} = split({AllAddress},',')[1],\n\t\t{Address 2} = split({AllAddress},',')[2],\n\t\t{Address 3} = split({AllAddress},',')[3],\n\t\t{Address 4} = split({AllAddress},',')[4]) ~> DerivedColumnAll\nAggregateComedyRatings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['RatedMovie'],\n\tumask: 0022,\n\tpartitionBy('hash', 1)) ~> MoviesSink\nDerivedColumnAll sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MovieWithMoreInfo'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> AllData"
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Sink')]",
            "[concat(variables('factoryId'), '/datasets/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LoadingSource')]"
          ]
        },
        {
          "name": "[concat(variables('dataFactoryName'), '/SoccerELT')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "soccerETL",
                "type": "ExecuteDataFlow",
                "dependsOn": [
                  {
                    "activity": "Copy data",
                    "dependencyConditions": [
                      "Succeeded"
                    ]
                  }
                ],
                "policy": {
                  "timeout": "1.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "dataflow": {
                    "referenceName": "soccerETL",
                    "type": "DataFlowReference"
                  },
                  "compute": {
                    "coreCount": 8,
                    "computeType": "General"
                  },
                  "traceLevel": "Fine"
                }
              },
              {
                "name": "Copy data",
                "type": "Copy",
                "dependsOn": [],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "source": {
                    "type": "DelimitedTextSource",
                    "storeSettings": {
                      "type": "AzureBlobFSReadSettings",
                      "recursive": true,
                      "wildcardFileName": "*.csv",
                      "enablePartitionDiscovery": false
                    },
                    "formatSettings": {
                      "type": "DelimitedTextReadSettings"
                    }
                  },
                  "sink": {
                    "type": "DelimitedTextSink",
                    "storeSettings": {
                      "type": "AzureBlobFSWriteSettings"
                    },
                    "formatSettings": {
                      "type": "DelimitedTextWriteSettings",
                      "quoteAllText": true,
                      "fileExtension": ".txt"
                    }
                  },
                  "enableStaging": false,
                  "translator": {
                    "type": "TabularTranslator",
                    "typeConversion": true,
                    "typeConversionSettings": {
                      "allowDataTruncation": true,
                      "treatBooleanAsNumber": false
                    }
                  }
                },
                "inputs": [
                  {
                    "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Extra')]",
                    "type": "DatasetReference"
                  }
                ],
                "outputs": [
                  {
                    "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Extra')]",
                    "type": "DatasetReference"
                  }
                ]
              }
            ],
            "folder": {
              "name": "SoccerELT"
            },
            "annotations": [],
            "lastPublishTime": "2021-06-08T13:58:59Z"
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Extra')]",
            "[concat(variables('factoryId'), '/dataflows/soccerETL')]"
          ]
        },
        {

          "name": "[concat(variables('dataFactoryName'), '/soccerETL')]",
          "apiVersion": "2018-06-01",
          "type": "Microsoft.DataFactory/factories/dataflows",
          "properties": {
            "folder": {
              "name": "Soccer"
            },
            "type": "MappingDataFlow",
            "typeProperties": {
              "sources": [
                {
                  "dataset": {
                    "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Source')]",
                    "type": "DatasetReference"
                  },
                  "name": "specifySchemaExtracts"
                }
              ],
              "sinks": [
                {
                  "dataset": {
                    "referenceName": "[concat('DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Sink')]",
                    "type": "DatasetReference"
                  },
                  "name": "SQLDBSink"
                }
              ],
              "transformations": [
                {
                  "name": "dictionaryMapping"
                },
                {
                  "name": "columnSelectorRenaming"
                },
                {
                  "name": "timeBins"
                }
              ],
              "script": "source(output(\n\t\tid_odsp as string,\n\t\tid_event as string,\n\t\tsort_order as string,\n\t\ttime as string,\n\t\ttext as string,\n\t\tevent_type as integer,\n\t\tevent_type2 as string,\n\t\tside as string,\n\t\tevent_team as string,\n\t\topponent as string,\n\t\tplayer as string,\n\t\tplayer2 as string,\n\t\tplayer_in as string,\n\t\tplayer_out as string,\n\t\tshot_place as string,\n\t\tshot_outcome as string,\n\t\tis_goal as string,\n\t\tlocation as string,\n\t\tbodypart as string,\n\t\tassist_method as string,\n\t\tsituation as string,\n\t\tfast_break as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> specifySchemaExtracts\nspecifySchemaExtracts derive(eventTypeMap = case(\r\n    event_type == 0,'Announcement',\r\n    event_type == 1,'Attempt',\r\n    event_type == 2,'Corner',\r\n    event_type == 3,'Foul',\r\n    event_type == 4,'Yellow Card',\r\n    event_type == 5,'Second yellow card',\r\n    event_type == 6,'Red card',\r\n    event_type == 7,'Substitution',\r\n    event_type == 8,'Free kick won',\r\n    event_type == 9,'Offside',\r\n    event_type == 10,'Hand ball',\r\n    event_type == 11,'Penalty conceded',\r\n    event_type == 98, 'NA'\r\n),\n\t\tdummy = 1,\n\t\ttext = iif(text=='',toString(null()),text)) ~> dictionaryMapping\ndictionaryMapping select(mapColumn(\n\t\tid_odsp,\n\t\tid_event,\n\t\tsort_order,\n\t\ttext,\n\t\tevent_type,\n\t\tevent_type2,\n\t\tside,\n\t\tevent_team,\n\t\topponent,\n\t\tplayer,\n\t\tplayer2,\n\t\tplayer_in,\n\t\tplayer_out,\n\t\tshot_place,\n\t\tshot_outcome,\n\t\tis_goal,\n\t\tlocation,\n\t\tbodypart,\n\t\tassist_method,\n\t\tsituation,\n\t\tfast_break,\n\t\tdummy,\n\t\ttime\n\t),\n\tpartitionBy('hash', 200,\n\t\tid_event\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> columnSelectorRenaming\ncolumnSelectorRenaming window(over(time),\n\tdesc(sort_order, true),\n\tTimeBins = nTile(10)) ~> timeBins\ntimeBins sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid_odsp as string,\n\t\tid_event as string,\n\t\tsort_order as integer,\n\t\ttime as integer,\n\t\tevent_type as integer,\n\t\tevent_type_str as string,\n\t\tevent_type2 as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tbatchSize: 2000,\n\terrorHandlingOption: 'stopOnFirstError',\n\tpartitionBy('roundRobin', 40)) ~> SQLDBSink"
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Source')]",
            "[concat(variables('factoryId'), '/datasets/DatasetAdl',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'Sink')]" 
          ]
        }
      ]
    }
  ]
}
