{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  "parameters": {
    "projectShort": {
      "type": "string",
      "maxLength": 8,
      "metadata": {
        "description": "A short identifier (up to 8 characters) for your project that will be added to your resource names"
      }
    },
    "sqlDbAdminLogin": {
      "type": "string",
      "defaultValue": "sqldemoadmin",
      "metadata": {
        "description": "The username for the database administrator login"
      }
    },
    "sqlDbAdminPassword": {
      "type": "securestring",
      "defaultValue": "!demo54321",
      "metadata": {
        "description": "The password for the database administrator login"
      }
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow('d')]",
      "metadata": {
        "description": "The timestamp format that will be used for creating the tags in your RG - leave at default"
      }
    },
    "StorageAccountSasProperties": {
      "type": "object",
      "defaultValue": {
        "signedServices": "b",
        "signedPermission": "rw",
        "signedExpiry": "[dateTimeAdd(utcNow('u'), 'P3M')]",
        "signedResourceTypes": "o"
      }
    }
  },
  "variables": {
    "blobStorageAccountName": "[concat('stgblob', parameters('projectShort'), uniqueString(resourceGroup().id))]",
    "adlStorageAccountName": "[concat('stgadl', parameters('projectShort'), uniqueString(resourceGroup().id))]",
    "keyVaultName": "[concat('kv-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "sqlConnectionStringSecretName": "[concat('connstr-', variables('sqldb_servername'))]",
    "blobStorageSASsecretName": "[concat('sas-', variables('blobStorageAccountName'))]",
    "blobStorageAccessKeySecretName": "[concat('key-', variables('blobStorageAccountName'))]",
    "blobStorageConnectionStringSecretName": "[concat('constr-', variables('blobStorageAccountName'))]",
    "adlStorageSASsecretName": "[concat('sas-', variables('adlStorageAccountName'))]",
    "adlStorageAccessKeySecretName": "[concat('key-', variables('adlStorageAccountName'))]",
    "adlStorageConnectionStringSecretName": "[concat('constr-', variables('adlStorageAccountName'))]",
    "azureKeyVault_baseUrl": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]",
    "sqldb_servername": "[concat('sqlsrv-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "sqldb_dbname": "[concat('sqldb-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "dataFactoryName": "[concat('adf-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "factoryId": "[concat('Microsoft.DataFactory/factories/adf-', parameters('projectShort'), '-', uniqueString(resourceGroup().id))]",
    "tags": {
      "createdOn": "[parameters('utcValue')]",
      "createdBy": "[concat('Automatic deployment for ', parameters('projectShort'))]"
    }
  },
  "resources": [
    { // create blob storage account
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('blobStorageAccountName')]",
      "location": "westeurope",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "isHnsEnabled": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    { // create blob storage blob service
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    { // create blob storage queue service
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create blob storage table service
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create blob storage sourcedata container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default/sourcedata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('blobStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    { // create blob storage sinkdata container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('blobStorageAccountName'), '/default/sinkdata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('blobStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    { // create adl storage account
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('adlStorageAccountName')]",
      "location": "eastus",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    { // create adl storage blob services
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "changeFeed": {
          "enabled": false
        },
        "restorePolicy": {
          "enabled": false
        },
        "containerDeleteRetentionPolicy": {
          "enabled": false
        },
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        },
        "isVersioningEnabled": false
      }
    },
    { // create adl storage queue services
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create adl storage table services
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    { // create blob extract container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/extract')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob loading container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/loading')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob movie in container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/movie-in')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob movie out container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/movie-out')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create blob tranform container
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[concat(variables('adlStorageAccountName'), '/default/transform')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlStorageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlStorageAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    { // create sql server and database
      "apiVersion": "2019-06-01-preview",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tags')]",
      "name": "[variables('sqldb_servername')]",
      "properties": {
        "administratorLogin": "[parameters('sqlDbAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlDbAdminPassword')]",
        "version": "12.0"
      },

      "resources": [
        {
          "apiVersion": "2021-02-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqldb_servername'))]"
          ],
          "location": "[resourceGroup().location]",
          "tags": "[variables('tags')]",
          "name": "[variables('sqldb_dbname')]",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "34359738368",
            "zoneRedundant": false,
            "minCapacity": 0.5,
            "autoPauseDelay": 60,
            "readScale": "Disabled",
            "storageAccountType": "LRS"
          },
          "sku": {
            "name": "GP_S_Gen5",
            "tier": "GeneralPurpose",
            "family": "Gen5",
            "capacity": 4
          },
          "type": "databases"
        },
        {
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqldb_servername'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          },
          "type": "firewallrules"
        }
      ]
    },
    { // create key vault
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "name": "[variables('keyVaultName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[concat('Microsoft.DataFactory/factories/', variables('dataFactoryName'))]"
      ],
      "properties": {
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.DataFactory/factories/', variables('dataFactoryName')), '2018-06-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
                "get"
              ],
              "secrets": [
                "list",
                "get",
                "set"
              ]
            }
          }
        ],
        "sku": {
          "name": "standard",
          "family": "A"
        }
      }
    },
    { // create blob sas secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('blobStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('blobStorageSASsecretName'))]",
      "properties": {
        "value": "[listAccountSas(variables('blobStorageAccountName'), '2018-07-01', parameters('StorageAccountSasProperties')).accountSasToken]"
      }
    },
    { // create blob acces key secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('blobStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('blobStorageAccessKeySecretName'))]",
      "properties": {
        "value": "[listKeys(variables('blobStorageAccountName'), '2018-07-01').keys[0].value]"
      }
    },
    { // create blob connection string secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('blobStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('blobStorageConnectionStringSecretName'))]",
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('blobStorageAccountName'), ';AccountKey=', listKeys(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('blobStorageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
      }
    },
    { // create adl sas secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('adlStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('adlStorageSASsecretName'))]",
      "properties": {
        "value": "[listAccountSas(variables('adlStorageAccountName'), '2018-07-01', parameters('StorageAccountSasProperties')).accountSasToken]"
      }
    },
    { // create adl access key secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('adlStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('adlStorageAccessKeySecretName'))]",
      "properties": {
        "value": "[listKeys(variables('adlStorageAccountName'), '2018-07-01').keys[0].value]"
      }
    },
    { // create adl connection string secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('adlStorageAccountName'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('adlStorageConnectionStringSecretName'))]",
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('adlStorageAccountName'), ';AccountKey=', listKeys(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('blobStorageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
      }
    },
    { // create sqldb connection string secret
      "apiVersion": "2018-02-14",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[concat('Microsoft.Sql/servers/', variables('sqldb_servername'))]"
      ],
      "name": "[concat(variables('keyVaultName'), '/', variables('sqlConnectionStringSecretName'))]",
      "properties": {
        "value": "[concat('Server=tcp:', variables('sqldb_servername'),'.database.windows.net,1433;Initial Catalog=', variables('sqldb_dbname'),';Persist Security Info=False;User ID=', parameters('sqlDbAdminLogin'),';Password=', parameters('sqlDbAdminPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
      }
    },
    { // create the azure data factory
      "name": "[variables('dataFactoryName')]",
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "location": "[resourceGroup().location]",
      "properties": {},
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": "[variables('tags')]",
      "resources": [
        { // create key vault linked service KeyVaultService
          "name": "[concat(variables('dataFactoryName'), '/KeyVaultService')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureKeyVault",
            "typeProperties": {
              "baseUrl": "[variables('azureKeyVault_baseUrl')]"
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]"
          ]
        },
        { // create blob storage linked servce LS_ABLB_IN
          "name": "[concat(variables('dataFactoryName'), '/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ABLB_IN')]",
          "type": "Microsoft.DataFactory/factories/linkedservices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobStorage",
            "typeProperties": {
              "connectionString": {
                "type": "AzureKeyVaultSecret",
                "store": {
                  "referenceName": "KeyVaultService",
                  "type": "LinkedServiceReference"
                },
                "secretName": "[variables('blobStorageConnectionStringSecretName')]"
              }
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/KeyVaultService')]"
          ]
        },
        { // create adl storage linked service LS_ADLS
          "name": "[concat(variables('dataFactoryName'), '/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ADLS')]",
          "type": "Microsoft.DataFactory/factories/linkedservices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobFS",
            "typeProperties": {
              "url": "[concat('https://', variables('adlStorageAccountName'),'.dfs.core.windows.net/')]",
              "accountKey": {
                "type": "AzureKeyVaultSecret",
                "store": {
                  "referenceName": "KeyVaultService",
                  "type": "LinkedServiceReference"
                },
                "secretName": "[variables('adlStorageAccessKeySecretName')]"
              }
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/KeyVaultService')]"
          ]
        },
        { // create sqldb linked service LS_ASQL
          "name": "[concat(variables('dataFactoryName'), '/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ASQL')]",
          "type": "Microsoft.DataFactory/factories/linkedservices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureSqlDatabase",
            "typeProperties": {
              "connectionString": {
                "type": "AzureKeyVaultSecret",
                "store": {
                  "referenceName": "KeyVaultService",
                  "type": "LinkedServiceReference"
                },
                "secretName": "[variables('sqlConnectionStringSecretName')]"
              }
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/KeyVaultService')]"
          ]
        },
        { // create Dataset ADLS_STAGING 
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS_STAGING')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ADLS')]",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "FileName": {
                "type": "string"
              },
              "Speccode": {
                "type": "string"
              }
            },
            "folder": {
              "name": "General"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileName": {
                  "value": "@dataset().FileName",
                  "type": "Expression"
                },
                "fileSystem": {
                  "value": "@concat(dataset().Speccode,'-staging')",
                  "type": "Expression"
                }
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "name": "movie",
                "type": "String"
              },
              {
                "name": "title",
                "type": "String"
              },
              {
                "name": "genres",
                "type": "String"
              },
              {
                "name": "year",
                "type": "String"
              },
              {
                "name": "Rating",
                "type": "String"
              },
              {
                "name": "Rotton Tomato",
                "type": "String"
              },
              {
                "name": "Prop_6",
                "type": "String"
              },
              {
                "name": "Address",
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ADLS')]"
          ]
        },
        { // create Dataset DS_ASQL
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ASQL')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ASQL')]",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "TableName": {
                "type": "string"
              },
              "SchemaName": {
                "type": "string"
              }
            },
            "folder": {
              "name": "General"
            },
            "annotations": [],
            "type": "AzureSqlTable",
            "schema": [],
            "typeProperties": {
              "schema": {
                "value": "@dataset().SchemaName",
                "type": "Expression"
              },
              "table": {
                "value": "@dataset().TableName",
                "type": "Expression"
              }
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ASQL')]"
          ]
        },
        { // create Dataset DS_ABLB
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ABLB')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ABLB_IN')]",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "speccode": {
                "type": "string"
              }
            },
            "folder": {
              "name": "Loading"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobStorageLocation",
                "container": {
                  "value": "@concat(dataset().speccode,'-in')",
                  "type": "Expression"
                }
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "type": "String"
              },
              {
                "type": "String"
              },
              {
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ABLB_IN')]"
          ]
        },
        { // create Dataset DS_ABLB_IN
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))),skip(parameters('projectShort'), 1), 'DS_ABLB_IN')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ABLB_IN')]",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "FileName": {
                "type": "string"
              },
              "speccode": {
                "type": "string"
              }
            },
            "folder": {
              "name": "Loading"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobStorageLocation",
                "fileName": {
                  "value": "@dataset().FileName",
                  "type": "Expression"
                },
                "container": {
                  "value": "@concat(dataset().speccode,'-in')",
                  "type": "Expression"
                }
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": [
              {
                "name": "movie",
                "type": "String"
              },
              {
                "name": "title",
                "type": "String"
              },
              {
                "name": "genres",
                "type": "String"
              },
              {
                "name": "year",
                "type": "String"
              },
              {
                "name": "Rating",
                "type": "String"
              },
              {
                "name": "Rotton Tomato",
                "type": "String"
              },
              {
                "name": "Address",
                "type": "String"
              }
            ]
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ABLB_IN')]"
          ]
        },
        { // create Dataset DS_ADLS
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ADLS')]",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "Speccode": {
                "type": "string"
              },
              "FileName": {
                "type": "string"
              }
            },
            "folder": {
              "name": "Transforming"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileName": {
                  "value": "@dataset().FileName",
                  "type": "Expression"
                },
                "fileSystem": {
                  "value": "@dataset().Speccode",
                  "type": "Expression"
                }
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": []
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ADLS')]"
          ]
        },
        { // create Dataset DS_ADLS_SINK
          "name": "[concat(variables('dataFactoryName'), '/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS_SINK')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "[concat('LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ADLS')]",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "Speccode": {
                "type": "string"
              }
            },
            "folder": {
              "name": "Transforming"
            },
            "annotations": [],
            "type": "DelimitedText",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileSystem": {
                  "value": "@dataset().Speccode",
                  "type": "Expression"
                }
              },
              "columnDelimiter": ",",
              "escapeChar": "\\",
              "firstRowAsHeader": true,
              "quoteChar": "\""
            },
            "schema": []
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/linkedServices/LinkedSvc',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'LS_ADLS')]"
          ]
        },
        { // create Pipeline ELT
          "name": "[concat(variables('dataFactoryName'), '/ELT')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Execute Pipeline - Loading",
                "type": "ExecutePipeline",
                "dependsOn": [],
                "userProperties": [],
                "typeProperties": {
                  "pipeline": {
                    "referenceName": "Loading",
                    "type": "PipelineReference"
                  },
                  "waitOnCompletion": true,
                  "parameters": {
                    "specdode": {
                      "value": "@pipeline().parameters.speccode",
                      "type": "Expression"
                    }
                  }
                }
              },
              {
                "name": "Execute Pipeline - Transforming",
                "type": "ExecutePipeline",
                "dependsOn": [
                  {
                    "activity": "Execute Pipeline - Loading",
                    "dependencyConditions": [
                      "Succeeded"
                    ]
                  }
                ],
                "userProperties": [],
                "typeProperties": {
                  "pipeline": {
                    "referenceName": "MovieTransformation",
                    "type": "PipelineReference"
                  },
                  "waitOnCompletion": true,
                  "parameters": {
                    "Speccode": {
                      "value": "@pipeline().parameters.speccode",
                      "type": "Expression"
                    }
                  }
                }
              },
              {
                "name": "Copy Data to ASQL",
                "type": "Copy",
                "dependsOn": [
                  {
                    "activity": "Execute Pipeline - Transforming",
                    "dependencyConditions": [
                      "Succeeded"
                    ]
                  }
                ],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "source": {
                    "type": "DelimitedTextSource",
                    "storeSettings": {
                      "type": "AzureBlobFSReadSettings",
                      "recursive": true,
                      "enablePartitionDiscovery": false
                    },
                    "formatSettings": {
                      "type": "DelimitedTextReadSettings"
                    }
                  },
                  "sink": {
                    "type": "AzureSqlSink",
                    "tableOption": "autoCreate",
                    "disableMetricsCollection": false
                  },
                  "enableStaging": false,
                  "translator": {
                    "type": "TabularTranslator",
                    "typeConversion": true,
                    "typeConversionSettings": {
                      "allowDataTruncation": true,
                      "treatBooleanAsNumber": false
                    }
                  }
                },
                "inputs": [
                  {
                    "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS')]",
                    "type": "DatasetReference",
                    "parameters": {
                      "Speccode": {
                        "value": "@pipeline().parameters.speccode",
                        "type": "Expression"
                      },
                      "FileName": {
                        "value": "@pipeline().parameters.FileName",
                        "type": "Expression"
                      }
                    }
                  }
                ],
                "outputs": [
                  {
                    "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ASQL')]",
                    "type": "DatasetReference",
                    "parameters": {
                      "TableName": {
                        "value": "@replace(pipeline().parameters.FileName,'.csv','')",
                        "type": "Expression"
                      },
                      "SchemaName": {
                        "value": "@pipeline().parameters.Schema",
                        "type": "Expression"
                      }
                    }
                  }
                ]
              }
            ],
            "parameters": {
              "speccode": {
                "type": "string",
                "defaultValue": "movie"
              },
              "FileName": {
                "type": "string",
                "defaultValue": "RatedMovie.csv"
              },
              "Schema": {
                "type": "string",
                "defaultValue": "dbo"
              }
            },
            "annotations": [],
            "lastPublishTime": "2021-08-12T17:06:06Z"
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ASQL')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ADLS')]",
            "[concat(variables('factoryId'), '/pipelines/Loading')]",
            "[concat(variables('factoryId'), '/pipelines/MovieTransformation')]"
          ]
        },
        { // create Pipeline Loading/Loading
          "name": "[concat(variables('dataFactoryName'), '/Loading')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Get Metadata",
                "type": "GetMetadata",
                "dependsOn": [],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "dataset": {
                    "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ABLB')]",
                    "type": "DatasetReference",
                    "parameters": {
                      "speccode": {
                        "value": "@pipeline().parameters.specdode",
                        "type": "Expression"
                      }
                    }
                  },
                  "fieldList": [
                    "childItems",
                    "itemName"
                  ],
                  "storeSettings": {
                    "type": "AzureBlobStorageReadSettings",
                    "recursive": true,
                    "enablePartitionDiscovery": false
                  },
                  "formatSettings": {
                    "type": "DelimitedTextReadSettings"
                  }
                }
              },
              {
                "name": "ForEach",
                "type": "ForEach",
                "dependsOn": [
                  {
                    "activity": "Get Metadata",
                    "dependencyConditions": [
                      "Succeeded"
                    ]
                  }
                ],
                "userProperties": [],
                "typeProperties": {
                  "items": {
                    "value": "@activity('Get Metadata').output.ChildItems\n\n",
                    "type": "Expression"
                  },
                  "isSequential": true,
                  "activities": [
                    {
                      "name": "Copy data",
                      "type": "Copy",
                      "dependsOn": [],
                      "policy": {
                        "timeout": "7.00:00:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [
                        {
                          "name": "Source",
                          "value": "movie-in//@{item().name}"
                        },
                        {
                          "name": "Destination",
                          "value": "loading//"
                        }
                      ],
                      "typeProperties": {
                        "source": {
                          "type": "DelimitedTextSource",
                          "storeSettings": {
                            "type": "AzureBlobStorageReadSettings",
                            "recursive": true,
                            "enablePartitionDiscovery": false
                          },
                          "formatSettings": {
                            "type": "DelimitedTextReadSettings"
                          }
                        },
                        "sink": {
                          "type": "DelimitedTextSink",
                          "storeSettings": {
                            "type": "AzureBlobFSWriteSettings"
                          },
                          "formatSettings": {
                            "type": "DelimitedTextWriteSettings",
                            "quoteAllText": true,
                            "fileExtension": ".txt"
                          }
                        },
                        "enableStaging": false,
                        "translator": {
                          "type": "TabularTranslator",
                          "typeConversion": true,
                          "typeConversionSettings": {
                            "allowDataTruncation": true,
                            "treatBooleanAsNumber": false
                          }
                        }
                      },
                      "inputs": [
                        {
                          "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ABLB_IN')]",
                          "type": "DatasetReference",
                          "parameters": {
                            "FileName": {
                              "value": "@item().name",
                              "type": "Expression"
                            },
                            "speccode": {
                              "value": "@pipeline().parameters.specdode",
                              "type": "Expression"
                            }
                          }
                        }
                      ],
                      "outputs": [
                        {
                          "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS_STAGING')]",
                          "type": "DatasetReference",
                          "parameters": {
                            "FileName": {
                              "value": "@item().name",
                              "type": "Expression"
                            },
                            "Speccode": {
                              "value": "@pipeline().parameters.specdode",
                              "type": "Expression"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "parameters": {
              "specdode": {
                "type": "string",
                "defaultValue": "movie"
              }
            },
            "folder": {
              "name": "Loading"
            },
            "annotations": [],
            "lastPublishTime": "2021-08-12T17:06:05Z"
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ABLB_IN')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ABLB')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ADLS_STAGING')]"
          ]
        },
        { // create Pipeline Transforming/MovieTransofrmation
          "name": "[concat(variables('dataFactoryName'), '/MovieTransformation')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Data flow - Movie",
                "type": "ExecuteDataFlow",
                "dependsOn": [],
                "policy": {
                  "timeout": "1.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "dataflow": {
                    "referenceName": "TransformationDemo",
                    "type": "DataFlowReference",
                    "parameters": {
                      "FileName": {
                        "value": "'@{pipeline().parameters.FileName}'",
                        "type": "Expression"
                      },
                      "Speccode": {
                        "value": "'@{pipeline().parameters.Speccode}'",
                        "type": "Expression"
                      }
                    },
                    "datasetParameters": {
                      "MovieDB": {
                        "FileName": {
                          "value": "@pipeline().parameters.FileName",
                          "type": "Expression"
                        },
                        "Speccode": {
                          "value": "@pipeline().parameters.Speccode",
                          "type": "Expression"
                        }
                      },
                      "MoviesSink": {
                        "Speccode": {
                          "value": "@pipeline().parameters.Speccode",
                          "type": "Expression"
                        }
                      },
                      "AllData": {
                        "Speccode": {
                          "value": "@pipeline().parameters.Speccode",
                          "type": "Expression"
                        }
                      }
                    }
                  },
                  "compute": {
                    "coreCount": 8,
                    "computeType": "General"
                  },
                  "traceLevel": "Fine"
                }
              }
            ],
            "parameters": {
              "FileName": {
                "type": "string",
                "defaultValue": "moviesDB.csv"
              },
              "Speccode": {
                "type": "string",
                "defaultValue": "movie"
              }
            },
            "folder": {
              "name": "Transforming"
            },
            "annotations": [],
            "lastPublishTime": "2021-08-12T17:06:05Z"
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/dataflows/TransformationDemo')]"
          ]
        },
        { // create Dataflow Transformation
          "name": "[concat(variables('dataFactoryName'), '/TransformationDemo')]",
          "type": "Microsoft.DataFactory/factories/dataflows",
          "apiVersion": "2018-06-01",
          "properties": {
            "type": "MappingDataFlow",
            "typeProperties": {
              "sources": [
                {
                  "dataset": {
                    "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS_STAGING')]",
                    "type": "DatasetReference"
                  },
                  "name": "MovieDB"
                }
              ],
              "sinks": [
                {
                  "dataset": {
                    "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS_SINK')]",
                    "type": "DatasetReference"
                  },
                  "name": "MoviesSink"
                },
                {
                  "dataset": {

                    "referenceName": "[concat('Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1), 'DS_ADLS_SINK')]",
                    "type": "DatasetReference"
                  },
                  "name": "AllData"
                }
              ],
              "transformations": [
                {
                  "name": "FilterYear"
                },
                {
                  "name": "AggregateComedyRatings"
                },
                {
                  "name": "DerivedColumnAddress"
                },
                {
                  "name": "DerivedColumnAll"
                }
              ],
              "script": "parameters{\n\tFileName as string,\n\tSpeccode as string\n}\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string,\n\t\tProp_6 as string,\n\t\tAddress as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($FileName)]) ~> MovieDB\nMovieDB filter(toInteger(year) >= 1900 && toInteger(year) <= 2000) ~> FilterYear\nDerivedColumnAll aggregate(groupBy(year),\n\tAverageComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRatings\nFilterYear derive(AllAddress = regexReplace(regexReplace(Address,'[\\n]',','),'[\\r]',',')) ~> DerivedColumnAddress\nDerivedColumnAddress derive({Address 1} = split({AllAddress},',')[1],\n\t\t{Address 2} = split({AllAddress},',')[2],\n\t\t{Address 3} = split({AllAddress},',')[3],\n\t\t{Address 4} = split({AllAddress},',')[4]) ~> DerivedColumnAll\nAggregateComedyRatings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['RatedMovie.csv'],\n\tumask: 0022,\n\tpartitionBy('hash', 1)) ~> MoviesSink\nDerivedColumnAll sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Movie.csv'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> AllData"
            }
          },
          "dependsOn": [
            "[variables('dataFactoryName')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ADLS_STAGING')]",
            "[concat(variables('factoryId'), '/datasets/Dataset',toUpper(first(parameters('projectShort'))), skip(parameters('projectShort'), 1),'DS_ADLS_SINK')]"
          ]
        }
      ]
    }
  ]
}
